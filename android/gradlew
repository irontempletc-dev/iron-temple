#!/usr/bin/env bash

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass any JVM options to Gradle and those will override the settings in this file.
DEFAULT_JVM_OPTS=""

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

# OS specific support.
cygwin=false
darwin=false
mingw=false
case "`uname`" in
  CYGWIN*)
    cygwin=true
    ;;
  Darwin*)
    darwin=true
    ;;
  MINGW*)
    mingw=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if ${cygwin} ; then
  [ -n "$GRADLE_HOME" ] && GRADLE_HOME=`cygpath --unix "$GRADLE_HOME"`
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`"/$link"
  fi
done
APP_HOME=`dirname "$PRG"`

# Absolutize APP_HOME
APP_HOME=`cd "$APP_HOME" > /dev/null && pwd`

# Check for interactive session
if [ -z "$PS1" ]; then
    # Do not complain about tty not being available
    QUIET_GRADLE=true
fi

# In Cygwin, calculations are done correctly, but paths get messed up unless they are converted.
if ${cygwin} ; then
  APP_HOME=`cygpath --path --windows "$APP_HOME"`
  CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
  JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  GRADLE_HOME=`cygpath --path --windows "$GRADLE_HOME"`
fi

# Add a hint for Gradlew if it's used.
if [ "`basename "$0"`" = "gradlew" ]; then
    GRADLE_HINT="* Run './gradlew --help' for more information."
    if [ "`dirname "$0"`" = "." ]; then
        GRADLE_HINT="* Run 'gradle --help' for more information."
    fi
fi

# For MinGW, ensure paths are in UNIX format before anything is touched
if ${mingw} ; then
  [ -n "$APP_HOME" ] &&
    APP_HOME=`(cd "$APP_HOME"; pwd)`
  # TODO a better way to check for mingw/msys?
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`(cd "$JAVA_HOME"; pwd)`
fi

# Pick up a local gradle install if available.
if [ -n "$GRADLE_HOME" ]; then
    GRADLE_HINT="* GRADLE_HOME environment variable is set to '$GRADLE_HOME'"
fi

# Read `gradle.properties` for potential GRADLE_OPTS
if [ -f "$APP_HOME/gradle/wrapper/gradle-wrapper.properties" ]; then
    # Found gradle-wrapper.properties, processing it
    while IFS= read -r prop; do
        case $prop in
            (distributionUrl=*)
                DIST_URL=${prop#*=}
                ;;
        esac
    done < "$APP_HOME/gradle/wrapper/gradle-wrapper.properties"
    # Detect the GRADLE_OPTS from a JAVA_TOOL_OPTIONS environment variable.
    # See https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/envvars002.html
    # This is used by Jenkins.
    GRADLE_OPTS="$JAVA_TOOL_OPTIONS $GRADLE_OPTS"
fi

if [ -f "$APP_HOME/gradle.properties" ]; then
    # Found gradle.properties, processing it
    while IFS= read -r prop; do
        case $prop in
            (org.gradle.jvmargs=*)
                # Remove the initial "org.gradle.jvmargs="
                JVM_ARGS_FROM_PROPERTIES=${prop#*=}
                # Remove leading and trailing whitespaces
                JVM_ARGS_FROM_PROPERTIES="$(echo -e "${JVM_ARGS_FROM_PROPERTIES}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
                GRADLE_OPTS="$GRADLE_OPTS $JVM_ARGS_FROM_PROPERTIES"
                ;;
        esac
    done < "$APP_HOME/gradle.properties"
fi

if [ -f "$HOME/.gradle/gradle.properties" ]; then
    # Found user-specific gradle.properties, processing it
    while IFS= read -r prop; do
        case $prop in
            (org.gradle.jvmargs=*)
                # Remove the initial "org.gradle.jvmargs="
                JVM_ARGS_FROM_PROPERTIES=${prop#*=}
                # Remove leading and trailing whitespaces
                JVM_ARGS_FROM_PROPERTIES="$(echo -e "${JVM_ARGS_FROM_PROPERTIES}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
                GRADLE_OPTS="$GRADLE_OPTS $JVM_ARGS_FROM_PROPERTIES"
                ;;
        esac
    done < "$HOME/.gradle/gradle.properties"
fi

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass any JVM options to Gradle and those will override the settings in this file.
if [ -z "$DEFAULT_JVM_OPTS" ]; then
    DEFAULT_JVM_OPTS="-Xmx64m -Xms64m"
fi

# Use the maximum available, or set MAX_FD != -1 to use that value.
if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ]; then
    # Increase the file descriptor limit, if necessary.
    if ! ulimit -n | grep -q "unlimited" ; then
        if ulimit -n -H | grep -q "unlimited" ; then
            # We can go up to the hard limit
            if [ "$darwin" = "true" ]; then
                # The 'unlimited' keyword is not supported on macOS
                MAX_FD=`ulimit -n -H`
            else
                MAX_FD="unlimited"
            fi
        fi
    fi
fi
if [ "$MAX_FD" != "unlimited" -a -n "$MAX_FD" -a -z `ulimit -n -H` ]; then
    if [ $MAX_FD -gt `ulimit -n` ]; then
        ulimit -n $MAX_FD
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if ${darwin}; then
  GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# Split up the JVM options based on spaces/quotes.
JVM_OPTS=
while [ $# -gt 0 ] ; do
  if [ "$1" = "-D" ]; then
    shift
    JVM_OPTS="$JVM_OPTS -D$1"
  elif [ "$1" = "-P" ]; then
    shift
    GRADLE_OPTS="$GRADLE_OPTS -P$1"
  else
    break
  fi
  shift
done

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS $JVM_OPTS"
JAVA_CMD_OPTS=("$@")

# If an alternative JAVA_HOME is specified, use it
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Build the command line
# This is the test that is used to discover the command line to use.
# It is simplified for the case where we know the distribution URL.
if [ -n "$DIST_URL" ]; then
    # We know the distribution URL, so we can use the correct command line directly
    # Build the command line to execute the wrapper
    WRAPPER_JAR="$APP_HOME/gradle/wrapper/gradle-wrapper.jar"
    # For Cygwin, switch paths to Windows format before running java
    if ${cygwin} ; then
        APP_HOME=`cygpath --path --windows "$APP_HOME"`
        CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
        WRAPPER_JAR=`cygpath --path --windows "$WRAPPER_JAR"`
    fi
    exec "$JAVACMD" "${JAVA_CMD_OPTS[@]}" -cp "$WRAPPER_JAR" org.gradle.wrapper.GradleWrapperMain "$@"
fi

# We don't know the distribution URL, so we need to determine it.
# We first look for a distribution in the user's home directory.
if [ -d "$HOME/.gradle/wrapper/dists" ]; then
    # Find the most recently used distribution
    LATEST_GRADLE_DIST="`ls -t "$HOME/.gradle/wrapper/dists" | head -1`"
    if [ -n "$LATEST_GRADLE_DIST" ]; then
        # Find the most recently used version of that distribution
        LATEST_GRADLE_VERSION="`ls -t "$HOME/.gradle/wrapper/dists/$LATEST_GRADLE_DIST" | head -1`"
        if [ -n "$LATEST_GRADLE_VERSION" ]; then
            # We have found a distribution, we can now use it.
            # Build the command line to execute the distribution
            GRADLE_EXE="$HOME/.gradle/wrapper/dists/$LATEST_GRADLE_DIST/$LATEST_GRADLE_VERSION/bin/gradle"
            # For Cygwin, switch paths to Windows format before running java
            if ${cygwin} ; then
                APP_HOME=`cygpath --path --windows "$APP_HOME"`
                CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
                GRADLE_EXE=`cygpath --path --windows "$GRADLE_EXE"`
            fi
            exec "$GRADLE_EXE" "$@"
        fi
    fi
fi

# We didn't find a distribution in the user's home directory, so we need to look in the project's directory.
if [ -f "$APP_HOME/gradle/wrapper/gradle-wrapper.properties" ]; then
    # Found gradle-wrapper.properties, processing it
    while IFS= read -r prop; do
        case $prop in
            (distributionUrl=*)
                DIST_URL=${prop#*=}
                ;;
        esac
    done < "$APP_HOME/gradle/wrapper/gradle-wrapper.properties"
    # We have found the distribution URL, so we can use it to download the distribution.
    # Download the distribution
    echo "Downloading $DIST_URL"
    TMP_ZIP="`mktemp -t gradle-wrapper.XXXXXX`"
    if [ -z "$TMP_ZIP" ]; then
        die "ERROR: Could not create temporary file for downloading the Gradle distribution."
    fi
    # Use wget or curl to download the distribution
    if [ -x "`which wget`" ]; then
        wget -O "$TMP_ZIP" "$DIST_URL" > /dev/null 2>&1
    elif [ -x "`which curl`" ]; then
        curl -f -L -o "$TMP_ZIP" "$DIST_URL" > /dev/null 2>&1
    else
        die "ERROR: Neither wget nor curl is available to download the Gradle distribution."
    fi
    # Unzip the distribution
    TMP_DIR="`mktemp -d -t gradle-wrapper.XXXXXX`"
    if [ -z "$TMP_DIR" ]; then
        die "ERROR: Could not create temporary directory for unzipping the Gradle distribution."
    fi
    unzip -q -d "$TMP_DIR" "$TMP_ZIP"
    rm "$TMP_ZIP"
    # Find the gradle executable
    GRADLE_EXE="`find "$TMP_DIR" -type f -name gradle -executable`"
    if [ -z "$GRADLE_EXE" ]; then
        die "ERROR: Could not find the gradle executable in the downloaded distribution."
    fi
    # For Cygwin, switch paths to Windows format before running java
    if ${cygwin} ; then
        APP_HOME=`cygpath --path --windows "$APP_HOME"`
        CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
        GRADLE_EXE=`cygpath --path --windows "$GRADLE_EXE"`
    fi
    exec "$GRADLE_EXE" "$@"
fi

# We didn't find a distribution URL, so we can't do anything.
die "ERROR: Could not find a Gradle distribution.

Please run the 'wrapper' task to generate the Gradle wrapper files.
$GRADLE_HINT"
